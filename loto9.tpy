import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from qiskit import QuantumCircuit, Aer, execute

class Loto9:
    def __init__(self):
        self.data = self.load_data()
        self.scaler = MinMaxScaler()
        self.model_gru = self.build_gru()
        self.model_gan = self.build_gan()
        self.quantum_weight = 0.4
        self.gan_weight = 0.3
        self.gru_weight = 0.3

    def load_data(self):
        df = pd.read_csv("base_Lotofacil.csv", sep=';')
        return df[[f"Bola{i}" for i in range(1, 16)]].values

    def build_gru(self):
        model = Sequential()
        model.add(GRU(128, input_shape=(None, 15), return_sequences=True))
        model.add(Dropout(0.2))
        model.add(GRU(64))
        model.add(Dense(15, activation="sigmoid"))
        model.compile(optimizer="adam", loss="mse")
        return model

    def build_gan(self):
        generator = Sequential([
            Dense(64, input_dim=100, activation="relu"),
            Dense(15, activation="sigmoid")
        ])
        discriminator = Sequential([
            Dense(64, input_dim=15, activation="relu"),
            Dense(1, activation="sigmoid")
        ])
        return generator, discriminator

    def quantum_simulation(self):
        qc = QuantumCircuit(15)
        for i in range(15):
            qc.h(i)
            qc.ry(np.random.rand() * np.pi, i)
        result = execute(qc, Aer.get_backend('qasm_simulator'), shots=1000).result()
        counts = result.get_counts()
        return [int(k, 2) + 1 for k in counts.keys()][:15]

    def predict(self):
        # Previsão GRU
        scaled_data = self.scaler.fit_transform(self.data)
        gru_pred = self.model_gru.predict(scaled_data[-1].reshape(1, 1, 15))
        gru_numbers = np.argsort(gru_pred[0])[-15:] + 1

        # Previsão GAN
        noise = np.random.normal(0, 1, (1, 100))
        gan_pred = self.model_gan[0].predict(noise)
        gan_numbers = np.argsort(gan_pred[0])[-15:] + 1

        # Previsão Quântica
        quantum_numbers = self.quantum_simulation()

        # Combinação ponderada
        final_probs = (
            self.gru_weight * gru_pred +
            self.gan_weight * gan_pred +
            self.quantum_weight * np.bincount(quantum_numbers, minlength=25)
        )
        return np.argsort(final_probs)[-15:] + 1

# Exemplo de uso
loto9 = Loto9()
print("Previsão Loto9:", loto9.predict())